
lcd1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c98  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001de8  08001de8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001de8  08001de8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001de8  08001de8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001de8  08001de8  00011de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dec  08001dec  00011dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08001dfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001dfc  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f92  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f3  00000000  00000000  00025fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  000271c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000658  00000000  00000000  00027888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000159a1  00000000  00000000  00027ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008306  00000000  00000000  0003d881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bed7  00000000  00000000  00045b87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001afc  00000000  00000000  000c1ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d8c 	.word	0x08001d8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001d8c 	.word	0x08001d8c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa88 	bl	8000664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f83a 	bl	80001cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8ac 	bl	80002b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f87c 	bl	8000258 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000160:	2064      	movs	r0, #100	; 0x64
 8000162:	f000 fae1 	bl	8000728 <HAL_Delay>
  lcd_set_addr(I2C_LCD_WRITE1);
 8000166:	204e      	movs	r0, #78	; 0x4e
 8000168:	f000 f9b0 	bl	80004cc <lcd_set_addr>
  lcd_init();
 800016c:	f000 f95e 	bl	800042c <lcd_init>
  lcd_send_string("LCD1");
 8000170:	4812      	ldr	r0, [pc, #72]	; (80001bc <main+0x70>)
 8000172:	f000 f970 	bl	8000456 <lcd_send_string>
  lcd_set_addr(I2C_LCD_WRITE2);
 8000176:	204c      	movs	r0, #76	; 0x4c
 8000178:	f000 f9a8 	bl	80004cc <lcd_set_addr>
  lcd_init();
 800017c:	f000 f956 	bl	800042c <lcd_init>
  lcd_send_string("LCD2");
 8000180:	480f      	ldr	r0, [pc, #60]	; (80001c0 <main+0x74>)
 8000182:	f000 f968 	bl	8000456 <lcd_send_string>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 8000186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018a:	f000 facd 	bl	8000728 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800018e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000192:	480c      	ldr	r0, [pc, #48]	; (80001c4 <main+0x78>)
 8000194:	f000 fd64 	bl	8000c60 <HAL_GPIO_TogglePin>
	lcd_set_cursor(1,0);
 8000198:	2100      	movs	r1, #0
 800019a:	2001      	movs	r0, #1
 800019c:	f000 f97a 	bl	8000494 <lcd_set_cursor>
	lcd_send_string("1234567890");
 80001a0:	4809      	ldr	r0, [pc, #36]	; (80001c8 <main+0x7c>)
 80001a2:	f000 f958 	bl	8000456 <lcd_send_string>
	HAL_Delay(5000);
 80001a6:	f241 3088 	movw	r0, #5000	; 0x1388
 80001aa:	f000 fabd 	bl	8000728 <HAL_Delay>
	lcd_clear();
 80001ae:	f000 f967 	bl	8000480 <lcd_clear>
	lcd_send_string("LCD2");
 80001b2:	4803      	ldr	r0, [pc, #12]	; (80001c0 <main+0x74>)
 80001b4:	f000 f94f 	bl	8000456 <lcd_send_string>
	HAL_Delay(1000);
 80001b8:	e7e5      	b.n	8000186 <main+0x3a>
 80001ba:	bf00      	nop
 80001bc:	08001da4 	.word	0x08001da4
 80001c0:	08001dac 	.word	0x08001dac
 80001c4:	40011000 	.word	0x40011000
 80001c8:	08001db4 	.word	0x08001db4

080001cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b090      	sub	sp, #64	; 0x40
 80001d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	2228      	movs	r2, #40	; 0x28
 80001d8:	2100      	movs	r1, #0
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 fdce 	bl	8001d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]
 80001ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ee:	2301      	movs	r3, #1
 80001f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001f8:	2300      	movs	r3, #0
 80001fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fc:	2301      	movs	r3, #1
 80001fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000200:	2302      	movs	r3, #2
 8000202:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800020a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800020e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000210:	f107 0318 	add.w	r3, r7, #24
 8000214:	4618      	mov	r0, r3
 8000216:	f001 f987 	bl	8001528 <HAL_RCC_OscConfig>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000220:	f000 f964 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000224:	230f      	movs	r3, #15
 8000226:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000228:	2302      	movs	r3, #2
 800022a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2102      	movs	r1, #2
 800023e:	4618      	mov	r0, r3
 8000240:	f001 fbf4 	bl	8001a2c <HAL_RCC_ClockConfig>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800024a:	f000 f94f 	bl	80004ec <Error_Handler>
  }
}
 800024e:	bf00      	nop
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
	...

08000258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <MX_I2C1_Init+0x50>)
 800025e:	4a13      	ldr	r2, [pc, #76]	; (80002ac <MX_I2C1_Init+0x54>)
 8000260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000262:	4b11      	ldr	r3, [pc, #68]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000264:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_I2C1_Init+0x58>)
 8000266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <MX_I2C1_Init+0x50>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800026e:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000270:	2200      	movs	r2, #0
 8000272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000274:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000276:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800027a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800027c:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <MX_I2C1_Init+0x50>)
 800027e:	2200      	movs	r2, #0
 8000280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000288:	4b07      	ldr	r3, [pc, #28]	; (80002a8 <MX_I2C1_Init+0x50>)
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000290:	2200      	movs	r2, #0
 8000292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000294:	4804      	ldr	r0, [pc, #16]	; (80002a8 <MX_I2C1_Init+0x50>)
 8000296:	f000 fcfd 	bl	8000c94 <HAL_I2C_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002a0:	f000 f924 	bl	80004ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	20000028 	.word	0x20000028
 80002ac:	40005400 	.word	0x40005400
 80002b0:	000186a0 	.word	0x000186a0

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <MX_GPIO_Init+0x90>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <MX_GPIO_Init+0x90>)
 80002ce:	f043 0310 	orr.w	r3, r3, #16
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_GPIO_Init+0x90>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0310 	and.w	r3, r3, #16
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_GPIO_Init+0x90>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a17      	ldr	r2, [pc, #92]	; (8000344 <MX_GPIO_Init+0x90>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_GPIO_Init+0x90>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0320 	and.w	r3, r3, #32
 80002f4:	60bb      	str	r3, [r7, #8]
 80002f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_GPIO_Init+0x90>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a11      	ldr	r2, [pc, #68]	; (8000344 <MX_GPIO_Init+0x90>)
 80002fe:	f043 0308 	orr.w	r3, r3, #8
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_GPIO_Init+0x90>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0308 	and.w	r3, r3, #8
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000316:	480c      	ldr	r0, [pc, #48]	; (8000348 <MX_GPIO_Init+0x94>)
 8000318:	f000 fc8a 	bl	8000c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800031c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000322:	2301      	movs	r3, #1
 8000324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800032a:	2302      	movs	r3, #2
 800032c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	4619      	mov	r1, r3
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <MX_GPIO_Init+0x94>)
 8000336:	f000 faff 	bl	8000938 <HAL_GPIO_Init>

}
 800033a:	bf00      	nop
 800033c:	3720      	adds	r7, #32
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	40011000 	.word	0x40011000

0800034c <lcd_send_inst>:

/* USER CODE BEGIN 4 */

void lcd_send_inst(char cmd)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b086      	sub	sp, #24
 8000350:	af02      	add	r7, sp, #8
 8000352:	4603      	mov	r3, r0
 8000354:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[4];
	char data_u = cmd & 0b11110000;
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f023 030f 	bic.w	r3, r3, #15
 800035c:	73fb      	strb	r3, [r7, #15]
	data_t[0] = data_u | 0b00001100;  //BL=1, EN=1
 800035e:	7bfb      	ldrb	r3, [r7, #15]
 8000360:	f043 030c 	orr.w	r3, r3, #12
 8000364:	b2db      	uxtb	r3, r3
 8000366:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0b00001000;  //BL=1, EN=0
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	b2db      	uxtb	r3, r3
 8000370:	727b      	strb	r3, [r7, #9]
	char data_l = (cmd & 0b00001111) << 4;
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	011b      	lsls	r3, r3, #4
 8000376:	73bb      	strb	r3, [r7, #14]
	data_t[2] = data_l | 0b00001100;  //BL=1, EN=1
 8000378:	7bbb      	ldrb	r3, [r7, #14]
 800037a:	f043 030c 	orr.w	r3, r3, #12
 800037e:	b2db      	uxtb	r3, r3
 8000380:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0b00001000;  //BL=1, EN=0
 8000382:	7bbb      	ldrb	r3, [r7, #14]
 8000384:	f043 0308 	orr.w	r3, r3, #8
 8000388:	b2db      	uxtb	r3, r3
 800038a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_t, 4, 100);
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <lcd_send_inst+0x60>)
 800038e:	8819      	ldrh	r1, [r3, #0]
 8000390:	f107 0208 	add.w	r2, r7, #8
 8000394:	2364      	movs	r3, #100	; 0x64
 8000396:	9300      	str	r3, [sp, #0]
 8000398:	2304      	movs	r3, #4
 800039a:	4805      	ldr	r0, [pc, #20]	; (80003b0 <lcd_send_inst+0x64>)
 800039c:	f000 fdbe 	bl	8000f1c <HAL_I2C_Master_Transmit>
	lcd_check_busy();
 80003a0:	f000 f83c 	bl	800041c <lcd_check_busy>
}
 80003a4:	bf00      	nop
 80003a6:	3710      	adds	r7, #16
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	2000007c 	.word	0x2000007c
 80003b0:	20000028 	.word	0x20000028

080003b4 <lcd_send_data>:

void lcd_send_data (char data)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af02      	add	r7, sp, #8
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data_t[4];
	char data_u = data & 0b11110000;
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	73fb      	strb	r3, [r7, #15]
	data_t[0] = data_u | 0b00001101;  //BL=1, EN=1, RS=1
 80003c6:	7bfb      	ldrb	r3, [r7, #15]
 80003c8:	f043 030d 	orr.w	r3, r3, #13
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0b00001001;  //BL=1, EN=0, RS=1
 80003d0:	7bfb      	ldrb	r3, [r7, #15]
 80003d2:	f043 0309 	orr.w	r3, r3, #9
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	727b      	strb	r3, [r7, #9]
	char data_l = (data & 0b00001111) << 4;
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	73bb      	strb	r3, [r7, #14]
	data_t[2] = data_l | 0b00001101;  //BL=1, EN=1, RS=1
 80003e0:	7bbb      	ldrb	r3, [r7, #14]
 80003e2:	f043 030d 	orr.w	r3, r3, #13
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0b00001001;  //BL=1, EN=0, RS=1
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	f043 0309 	orr.w	r3, r3, #9
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, lcd_addr, data_t, 4, 100);
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <lcd_send_data+0x60>)
 80003f6:	8819      	ldrh	r1, [r3, #0]
 80003f8:	f107 0208 	add.w	r2, r7, #8
 80003fc:	2364      	movs	r3, #100	; 0x64
 80003fe:	9300      	str	r3, [sp, #0]
 8000400:	2304      	movs	r3, #4
 8000402:	4805      	ldr	r0, [pc, #20]	; (8000418 <lcd_send_data+0x64>)
 8000404:	f000 fd8a 	bl	8000f1c <HAL_I2C_Master_Transmit>
	lcd_check_busy();
 8000408:	f000 f808 	bl	800041c <lcd_check_busy>
}
 800040c:	bf00      	nop
 800040e:	3710      	adds	r7, #16
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	2000007c 	.word	0x2000007c
 8000418:	20000028 	.word	0x20000028

0800041c <lcd_check_busy>:

uint8_t lcd_check_busy(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	//TODO: read busy flag from lcd
	HAL_Delay(1);
 8000420:	2001      	movs	r0, #1
 8000422:	f000 f981 	bl	8000728 <HAL_Delay>
	return 0;
 8000426:	2300      	movs	r3, #0
}
 8000428:	4618      	mov	r0, r3
 800042a:	bd80      	pop	{r7, pc}

0800042c <lcd_init>:

void lcd_init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	HAL_Delay(5);
 8000430:	2005      	movs	r0, #5
 8000432:	f000 f979 	bl	8000728 <HAL_Delay>
	lcd_send_inst(0b00100000); // Init - 00 1 DL 0000; DL 8bit mode = 1, 4 bit mode = 0
 8000436:	2020      	movs	r0, #32
 8000438:	f7ff ff88 	bl	800034c <lcd_send_inst>
	lcd_send_inst(0b00101000); // Init - 00 1 DL N F 00; N 2lines = 1; F fond pixel count
 800043c:	2028      	movs	r0, #40	; 0x28
 800043e:	f7ff ff85 	bl	800034c <lcd_send_inst>
	lcd_clear();
 8000442:	f000 f81d 	bl	8000480 <lcd_clear>
	lcd_send_inst(0b00000110); // Set Cursor - 00000 1 I/D S; I/D - Inc/Dec 1/0; S - Shift/No Shift 1/0
 8000446:	2006      	movs	r0, #6
 8000448:	f7ff ff80 	bl	800034c <lcd_send_inst>
	lcd_send_inst(0b00001100); // Set display - 0000 1 D C B; D - Display on/off 1/0; C - Cursor on/off 1/0; B - Blinking on/off 1/0
 800044c:	200c      	movs	r0, #12
 800044e:	f7ff ff7d 	bl	800034c <lcd_send_inst>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}

08000456 <lcd_send_string>:

void lcd_send_string(char *str)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800045e:	e006      	b.n	800046e <lcd_send_string+0x18>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	607a      	str	r2, [r7, #4]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ffa3 	bl	80003b4 <lcd_send_data>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1f4      	bne.n	8000460 <lcd_send_string+0xa>
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}

08000480 <lcd_clear>:

void lcd_clear(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	lcd_send_inst(0b00000001); // Clear display - no params
 8000484:	2001      	movs	r0, #1
 8000486:	f7ff ff61 	bl	800034c <lcd_send_inst>
	HAL_Delay(2);
 800048a:	2002      	movs	r0, #2
 800048c:	f000 f94c 	bl	8000728 <HAL_Delay>
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}

08000494 <lcd_set_cursor>:

void lcd_set_cursor(char row, char col)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	460a      	mov	r2, r1
 800049e:	71fb      	strb	r3, [r7, #7]
 80004a0:	4613      	mov	r3, r2
 80004a2:	71bb      	strb	r3, [r7, #6]
	lcd_send_inst(col | (row > 0 ? 0xC0 : 0x80));
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d002      	beq.n	80004b0 <lcd_set_cursor+0x1c>
 80004aa:	f06f 023f 	mvn.w	r2, #63	; 0x3f
 80004ae:	e001      	b.n	80004b4 <lcd_set_cursor+0x20>
 80004b0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80004b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff44 	bl	800034c <lcd_send_inst>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <lcd_set_addr>:

void lcd_set_addr(uint16_t addr)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	lcd_addr = addr;
 80004d6:	4a04      	ldr	r2, [pc, #16]	; (80004e8 <lcd_set_addr+0x1c>)
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	8013      	strh	r3, [r2, #0]
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	2000007c 	.word	0x2000007c

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <HAL_MspInit+0x40>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <HAL_MspInit+0x40>)
 8000504:	f043 0301 	orr.w	r3, r3, #1
 8000508:	6193      	str	r3, [r2, #24]
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_MspInit+0x40>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_MspInit+0x40>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <HAL_MspInit+0x40>)
 800051c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000520:	61d3      	str	r3, [r2, #28]
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <HAL_MspInit+0x40>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <HAL_I2C_MspInit+0x74>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d125      	bne.n	80005a8 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800055c:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_I2C_MspInit+0x78>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <HAL_I2C_MspInit+0x78>)
 8000562:	f043 0308 	orr.w	r3, r3, #8
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b12      	ldr	r3, [pc, #72]	; (80005b4 <HAL_I2C_MspInit+0x78>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0308 	and.w	r3, r3, #8
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000574:	23c0      	movs	r3, #192	; 0xc0
 8000576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000578:	2312      	movs	r3, #18
 800057a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	4619      	mov	r1, r3
 800058a:	480b      	ldr	r0, [pc, #44]	; (80005b8 <HAL_I2C_MspInit+0x7c>)
 800058c:	f000 f9d4 	bl	8000938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <HAL_I2C_MspInit+0x78>)
 8000592:	69db      	ldr	r3, [r3, #28]
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <HAL_I2C_MspInit+0x78>)
 8000596:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800059a:	61d3      	str	r3, [r2, #28]
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_I2C_MspInit+0x78>)
 800059e:	69db      	ldr	r3, [r3, #28]
 80005a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005a8:	bf00      	nop
 80005aa:	3720      	adds	r7, #32
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40005400 	.word	0x40005400
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010c00 	.word	0x40010c00

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <NMI_Handler+0x4>

080005c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <HardFault_Handler+0x4>

080005c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <MemManage_Handler+0x4>

080005ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d2:	e7fe      	b.n	80005d2 <BusFault_Handler+0x4>

080005d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005d8:	e7fe      	b.n	80005d8 <UsageFault_Handler+0x4>

080005da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr

080005e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr

080005f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr

080005fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000602:	f000 f875 	bl	80006f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}

0800060a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
	...

08000618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	; (800065c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800063e:	f7ff ffe4 	bl	800060a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000642:	f001 fb77 	bl	8001d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000646:	f7ff fd81 	bl	800014c <main>
  bx lr
 800064a:	4770      	bx	lr
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000654:	08001df0 	.word	0x08001df0
  ldr r2, =_sbss
 8000658:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800065c:	20000084 	.word	0x20000084

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>
	...

08000664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <HAL_Init+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a07      	ldr	r2, [pc, #28]	; (800068c <HAL_Init+0x28>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000674:	2003      	movs	r0, #3
 8000676:	f000 f92b 	bl	80008d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067a:	200f      	movs	r0, #15
 800067c:	f000 f808 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000680:	f7ff ff3a 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40022000 	.word	0x40022000

08000690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <HAL_InitTick+0x54>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <HAL_InitTick+0x58>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4619      	mov	r1, r3
 80006a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 f935 	bl	800091e <HAL_SYSTICK_Config>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e00e      	b.n	80006dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b0f      	cmp	r3, #15
 80006c2:	d80a      	bhi.n	80006da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c4:	2200      	movs	r2, #0
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006cc:	f000 f90b 	bl	80008e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <HAL_InitTick+0x5c>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000000 	.word	0x20000000
 80006e8:	20000008 	.word	0x20000008
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <HAL_IncTick+0x1c>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_IncTick+0x20>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4413      	add	r3, r2
 8000700:	4a03      	ldr	r2, [pc, #12]	; (8000710 <HAL_IncTick+0x20>)
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000008 	.word	0x20000008
 8000710:	20000080 	.word	0x20000080

08000714 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  return uwTick;
 8000718:	4b02      	ldr	r3, [pc, #8]	; (8000724 <HAL_GetTick+0x10>)
 800071a:	681b      	ldr	r3, [r3, #0]
}
 800071c:	4618      	mov	r0, r3
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	20000080 	.word	0x20000080

08000728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000730:	f7ff fff0 	bl	8000714 <HAL_GetTick>
 8000734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000740:	d005      	beq.n	800074e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000742:	4b0a      	ldr	r3, [pc, #40]	; (800076c <HAL_Delay+0x44>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074e:	bf00      	nop
 8000750:	f7ff ffe0 	bl	8000714 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	429a      	cmp	r2, r3
 800075e:	d8f7      	bhi.n	8000750 <HAL_Delay+0x28>
  {
  }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	60d3      	str	r3, [r2, #12]
}
 80007a8:	bf00      	nop
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800089c:	d301      	bcc.n	80008a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089e:	2301      	movs	r3, #1
 80008a0:	e00f      	b.n	80008c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <SysTick_Config+0x40>)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008aa:	210f      	movs	r1, #15
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008b0:	f7ff ff90 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <SysTick_Config+0x40>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ba:	4b04      	ldr	r3, [pc, #16]	; (80008cc <SysTick_Config+0x40>)
 80008bc:	2207      	movs	r2, #7
 80008be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	e000e010 	.word	0xe000e010

080008d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f7ff ff49 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b086      	sub	sp, #24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
 80008f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f8:	f7ff ff5e 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 80008fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff ff90 	bl	8000828 <NVIC_EncodePriority>
 8000908:	4602      	mov	r2, r0
 800090a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff5f 	bl	80007d4 <__NVIC_SetPriority>
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffb0 	bl	800088c <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b08b      	sub	sp, #44	; 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e161      	b.n	8000c10 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800094c:	2201      	movs	r2, #1
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	fa02 f303 	lsl.w	r3, r2, r3
 8000954:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	4013      	ands	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	429a      	cmp	r2, r3
 8000966:	f040 8150 	bne.w	8000c0a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	4a97      	ldr	r2, [pc, #604]	; (8000bcc <HAL_GPIO_Init+0x294>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d05e      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 8000974:	4a95      	ldr	r2, [pc, #596]	; (8000bcc <HAL_GPIO_Init+0x294>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d875      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 800097a:	4a95      	ldr	r2, [pc, #596]	; (8000bd0 <HAL_GPIO_Init+0x298>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d058      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 8000980:	4a93      	ldr	r2, [pc, #588]	; (8000bd0 <HAL_GPIO_Init+0x298>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d86f      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 8000986:	4a93      	ldr	r2, [pc, #588]	; (8000bd4 <HAL_GPIO_Init+0x29c>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d052      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 800098c:	4a91      	ldr	r2, [pc, #580]	; (8000bd4 <HAL_GPIO_Init+0x29c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d869      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 8000992:	4a91      	ldr	r2, [pc, #580]	; (8000bd8 <HAL_GPIO_Init+0x2a0>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d04c      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 8000998:	4a8f      	ldr	r2, [pc, #572]	; (8000bd8 <HAL_GPIO_Init+0x2a0>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d863      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 800099e:	4a8f      	ldr	r2, [pc, #572]	; (8000bdc <HAL_GPIO_Init+0x2a4>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d046      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
 80009a4:	4a8d      	ldr	r2, [pc, #564]	; (8000bdc <HAL_GPIO_Init+0x2a4>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d85d      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 80009aa:	2b12      	cmp	r3, #18
 80009ac:	d82a      	bhi.n	8000a04 <HAL_GPIO_Init+0xcc>
 80009ae:	2b12      	cmp	r3, #18
 80009b0:	d859      	bhi.n	8000a66 <HAL_GPIO_Init+0x12e>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <HAL_GPIO_Init+0x80>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	08000a33 	.word	0x08000a33
 80009bc:	08000a0d 	.word	0x08000a0d
 80009c0:	08000a1f 	.word	0x08000a1f
 80009c4:	08000a61 	.word	0x08000a61
 80009c8:	08000a67 	.word	0x08000a67
 80009cc:	08000a67 	.word	0x08000a67
 80009d0:	08000a67 	.word	0x08000a67
 80009d4:	08000a67 	.word	0x08000a67
 80009d8:	08000a67 	.word	0x08000a67
 80009dc:	08000a67 	.word	0x08000a67
 80009e0:	08000a67 	.word	0x08000a67
 80009e4:	08000a67 	.word	0x08000a67
 80009e8:	08000a67 	.word	0x08000a67
 80009ec:	08000a67 	.word	0x08000a67
 80009f0:	08000a67 	.word	0x08000a67
 80009f4:	08000a67 	.word	0x08000a67
 80009f8:	08000a67 	.word	0x08000a67
 80009fc:	08000a15 	.word	0x08000a15
 8000a00:	08000a29 	.word	0x08000a29
 8000a04:	4a76      	ldr	r2, [pc, #472]	; (8000be0 <HAL_GPIO_Init+0x2a8>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d013      	beq.n	8000a32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a0a:	e02c      	b.n	8000a66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	623b      	str	r3, [r7, #32]
          break;
 8000a12:	e029      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e024      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	3308      	adds	r3, #8
 8000a24:	623b      	str	r3, [r7, #32]
          break;
 8000a26:	e01f      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	330c      	adds	r3, #12
 8000a2e:	623b      	str	r3, [r7, #32]
          break;
 8000a30:	e01a      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d102      	bne.n	8000a40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	623b      	str	r3, [r7, #32]
          break;
 8000a3e:	e013      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d105      	bne.n	8000a54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	69fa      	ldr	r2, [r7, #28]
 8000a50:	611a      	str	r2, [r3, #16]
          break;
 8000a52:	e009      	b.n	8000a68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a54:	2308      	movs	r3, #8
 8000a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	69fa      	ldr	r2, [r7, #28]
 8000a5c:	615a      	str	r2, [r3, #20]
          break;
 8000a5e:	e003      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
          break;
 8000a64:	e000      	b.n	8000a68 <HAL_GPIO_Init+0x130>
          break;
 8000a66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	2bff      	cmp	r3, #255	; 0xff
 8000a6c:	d801      	bhi.n	8000a72 <HAL_GPIO_Init+0x13a>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	e001      	b.n	8000a76 <HAL_GPIO_Init+0x13e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3304      	adds	r3, #4
 8000a76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	2bff      	cmp	r3, #255	; 0xff
 8000a7c:	d802      	bhi.n	8000a84 <HAL_GPIO_Init+0x14c>
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	e002      	b.n	8000a8a <HAL_GPIO_Init+0x152>
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	3b08      	subs	r3, #8
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	210f      	movs	r1, #15
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	fa01 f303 	lsl.w	r3, r1, r3
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	6a39      	ldr	r1, [r7, #32]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 80a9 	beq.w	8000c0a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab8:	4b4a      	ldr	r3, [pc, #296]	; (8000be4 <HAL_GPIO_Init+0x2ac>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a49      	ldr	r2, [pc, #292]	; (8000be4 <HAL_GPIO_Init+0x2ac>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <HAL_GPIO_Init+0x2ac>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ad0:	4a45      	ldr	r2, [pc, #276]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000adc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	4013      	ands	r3, r2
 8000af2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a3d      	ldr	r2, [pc, #244]	; (8000bec <HAL_GPIO_Init+0x2b4>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d00d      	beq.n	8000b18 <HAL_GPIO_Init+0x1e0>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a3c      	ldr	r2, [pc, #240]	; (8000bf0 <HAL_GPIO_Init+0x2b8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d007      	beq.n	8000b14 <HAL_GPIO_Init+0x1dc>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a3b      	ldr	r2, [pc, #236]	; (8000bf4 <HAL_GPIO_Init+0x2bc>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d101      	bne.n	8000b10 <HAL_GPIO_Init+0x1d8>
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	e004      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b10:	2303      	movs	r3, #3
 8000b12:	e002      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <HAL_GPIO_Init+0x1e2>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b1c:	f002 0203 	and.w	r2, r2, #3
 8000b20:	0092      	lsls	r2, r2, #2
 8000b22:	4093      	lsls	r3, r2
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b2a:	492f      	ldr	r1, [pc, #188]	; (8000be8 <HAL_GPIO_Init+0x2b0>)
 8000b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2e:	089b      	lsrs	r3, r3, #2
 8000b30:	3302      	adds	r3, #2
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d006      	beq.n	8000b52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	492b      	ldr	r1, [pc, #172]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	600b      	str	r3, [r1, #0]
 8000b50:	e006      	b.n	8000b60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	4927      	ldr	r1, [pc, #156]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d006      	beq.n	8000b7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b6e:	685a      	ldr	r2, [r3, #4]
 8000b70:	4921      	ldr	r1, [pc, #132]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	604b      	str	r3, [r1, #4]
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	43db      	mvns	r3, r3
 8000b82:	491d      	ldr	r1, [pc, #116]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b84:	4013      	ands	r3, r2
 8000b86:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d006      	beq.n	8000ba2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b96:	689a      	ldr	r2, [r3, #8]
 8000b98:	4917      	ldr	r1, [pc, #92]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	608b      	str	r3, [r1, #8]
 8000ba0:	e006      	b.n	8000bb0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	4913      	ldr	r1, [pc, #76]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d01f      	beq.n	8000bfc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000bbe:	68da      	ldr	r2, [r3, #12]
 8000bc0:	490d      	ldr	r1, [pc, #52]	; (8000bf8 <HAL_GPIO_Init+0x2c0>)
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	60cb      	str	r3, [r1, #12]
 8000bc8:	e01f      	b.n	8000c0a <HAL_GPIO_Init+0x2d2>
 8000bca:	bf00      	nop
 8000bcc:	10320000 	.word	0x10320000
 8000bd0:	10310000 	.word	0x10310000
 8000bd4:	10220000 	.word	0x10220000
 8000bd8:	10210000 	.word	0x10210000
 8000bdc:	10120000 	.word	0x10120000
 8000be0:	10110000 	.word	0x10110000
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40010c00 	.word	0x40010c00
 8000bf4:	40011000 	.word	0x40011000
 8000bf8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <HAL_GPIO_Init+0x2f4>)
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	43db      	mvns	r3, r3
 8000c04:	4909      	ldr	r1, [pc, #36]	; (8000c2c <HAL_GPIO_Init+0x2f4>)
 8000c06:	4013      	ands	r3, r2
 8000c08:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	fa22 f303 	lsr.w	r3, r2, r3
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	f47f ae96 	bne.w	800094c <HAL_GPIO_Init+0x14>
  }
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	372c      	adds	r7, #44	; 0x2c
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	40010400 	.word	0x40010400

08000c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c40:	787b      	ldrb	r3, [r7, #1]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c4c:	e003      	b.n	8000c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c4e:	887b      	ldrh	r3, [r7, #2]
 8000c50:	041a      	lsls	r2, r3, #16
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	611a      	str	r2, [r3, #16]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	460b      	mov	r3, r1
 8000c6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c72:	887a      	ldrh	r2, [r7, #2]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4013      	ands	r3, r2
 8000c78:	041a      	lsls	r2, r3, #16
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43d9      	mvns	r1, r3
 8000c7e:	887b      	ldrh	r3, [r7, #2]
 8000c80:	400b      	ands	r3, r1
 8000c82:	431a      	orrs	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	611a      	str	r2, [r3, #16]
}
 8000c88:	bf00      	nop
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bc80      	pop	{r7}
 8000c90:	4770      	bx	lr
	...

08000c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e12b      	b.n	8000efe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d106      	bne.n	8000cc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff fc3e 	bl	800053c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2224      	movs	r2, #36	; 0x24
 8000cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0201 	bic.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ce6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cf8:	f000 ffea 	bl	8001cd0 <HAL_RCC_GetPCLK1Freq>
 8000cfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	4a81      	ldr	r2, [pc, #516]	; (8000f08 <HAL_I2C_Init+0x274>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d807      	bhi.n	8000d18 <HAL_I2C_Init+0x84>
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4a80      	ldr	r2, [pc, #512]	; (8000f0c <HAL_I2C_Init+0x278>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	bf94      	ite	ls
 8000d10:	2301      	movls	r3, #1
 8000d12:	2300      	movhi	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	e006      	b.n	8000d26 <HAL_I2C_Init+0x92>
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4a7d      	ldr	r2, [pc, #500]	; (8000f10 <HAL_I2C_Init+0x27c>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	bf94      	ite	ls
 8000d20:	2301      	movls	r3, #1
 8000d22:	2300      	movhi	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e0e7      	b.n	8000efe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4a78      	ldr	r2, [pc, #480]	; (8000f14 <HAL_I2C_Init+0x280>)
 8000d32:	fba2 2303 	umull	r2, r3, r2, r3
 8000d36:	0c9b      	lsrs	r3, r3, #18
 8000d38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	68ba      	ldr	r2, [r7, #8]
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	4a6a      	ldr	r2, [pc, #424]	; (8000f08 <HAL_I2C_Init+0x274>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d802      	bhi.n	8000d68 <HAL_I2C_Init+0xd4>
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	3301      	adds	r3, #1
 8000d66:	e009      	b.n	8000d7c <HAL_I2C_Init+0xe8>
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d6e:	fb02 f303 	mul.w	r3, r2, r3
 8000d72:	4a69      	ldr	r2, [pc, #420]	; (8000f18 <HAL_I2C_Init+0x284>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	099b      	lsrs	r3, r3, #6
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	687a      	ldr	r2, [r7, #4]
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	430b      	orrs	r3, r1
 8000d82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	495c      	ldr	r1, [pc, #368]	; (8000f08 <HAL_I2C_Init+0x274>)
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d819      	bhi.n	8000dd0 <HAL_I2C_Init+0x13c>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	1e59      	subs	r1, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	fbb1 f3f3 	udiv	r3, r1, r3
 8000daa:	1c59      	adds	r1, r3, #1
 8000dac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000db0:	400b      	ands	r3, r1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00a      	beq.n	8000dcc <HAL_I2C_Init+0x138>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1e59      	subs	r1, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dca:	e051      	b.n	8000e70 <HAL_I2C_Init+0x1dc>
 8000dcc:	2304      	movs	r3, #4
 8000dce:	e04f      	b.n	8000e70 <HAL_I2C_Init+0x1dc>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d111      	bne.n	8000dfc <HAL_I2C_Init+0x168>
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	1e58      	subs	r0, r3, #1
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6859      	ldr	r1, [r3, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	440b      	add	r3, r1
 8000de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dea:	3301      	adds	r3, #1
 8000dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf0c      	ite	eq
 8000df4:	2301      	moveq	r3, #1
 8000df6:	2300      	movne	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	e012      	b.n	8000e22 <HAL_I2C_Init+0x18e>
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	1e58      	subs	r0, r3, #1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6859      	ldr	r1, [r3, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	0099      	lsls	r1, r3, #2
 8000e0c:	440b      	add	r3, r1
 8000e0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf0c      	ite	eq
 8000e1c:	2301      	moveq	r3, #1
 8000e1e:	2300      	movne	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_I2C_Init+0x196>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e022      	b.n	8000e70 <HAL_I2C_Init+0x1dc>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10e      	bne.n	8000e50 <HAL_I2C_Init+0x1bc>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1e58      	subs	r0, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6859      	ldr	r1, [r3, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	440b      	add	r3, r1
 8000e40:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e44:	3301      	adds	r3, #1
 8000e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e4e:	e00f      	b.n	8000e70 <HAL_I2C_Init+0x1dc>
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1e58      	subs	r0, r3, #1
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6859      	ldr	r1, [r3, #4]
 8000e58:	460b      	mov	r3, r1
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	0099      	lsls	r1, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	6809      	ldr	r1, [r1, #0]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69da      	ldr	r2, [r3, #28]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a1b      	ldr	r3, [r3, #32]
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	6911      	ldr	r1, [r2, #16]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68d2      	ldr	r2, [r2, #12]
 8000eaa:	4311      	orrs	r1, r2
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	6812      	ldr	r2, [r2, #0]
 8000eb0:	430b      	orrs	r3, r1
 8000eb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0201 	orr.w	r2, r2, #1
 8000ede:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2220      	movs	r2, #32
 8000eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	000186a0 	.word	0x000186a0
 8000f0c:	001e847f 	.word	0x001e847f
 8000f10:	003d08ff 	.word	0x003d08ff
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	10624dd3 	.word	0x10624dd3

08000f1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af02      	add	r7, sp, #8
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	461a      	mov	r2, r3
 8000f28:	460b      	mov	r3, r1
 8000f2a:	817b      	strh	r3, [r7, #10]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff fbf0 	bl	8000714 <HAL_GetTick>
 8000f34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b20      	cmp	r3, #32
 8000f40:	f040 80e0 	bne.w	8001104 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2319      	movs	r3, #25
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4970      	ldr	r1, [pc, #448]	; (8001110 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f964 	bl	800121c <I2C_WaitOnFlagUntilTimeout>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e0d3      	b.n	8001106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d101      	bne.n	8000f6c <HAL_I2C_Master_Transmit+0x50>
 8000f68:	2302      	movs	r3, #2
 8000f6a:	e0cc      	b.n	8001106 <HAL_I2C_Master_Transmit+0x1ea>
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d007      	beq.n	8000f92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f042 0201 	orr.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2221      	movs	r2, #33	; 0x21
 8000fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2210      	movs	r2, #16
 8000fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	893a      	ldrh	r2, [r7, #8]
 8000fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4a50      	ldr	r2, [pc, #320]	; (8001114 <HAL_I2C_Master_Transmit+0x1f8>)
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fd4:	8979      	ldrh	r1, [r7, #10]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	6a3a      	ldr	r2, [r7, #32]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f000 f89c 	bl	8001118 <I2C_MasterRequestWrite>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e08d      	b.n	8001106 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	695b      	ldr	r3, [r3, #20]
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001000:	e066      	b.n	80010d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	6a39      	ldr	r1, [r7, #32]
 8001006:	68f8      	ldr	r0, [r7, #12]
 8001008:	f000 f9de 	bl	80013c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00d      	beq.n	800102e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	2b04      	cmp	r3, #4
 8001018:	d107      	bne.n	800102a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001028:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e06b      	b.n	8001106 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001048:	b29b      	uxth	r3, r3
 800104a:	3b01      	subs	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001056:	3b01      	subs	r3, #1
 8001058:	b29a      	uxth	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b04      	cmp	r3, #4
 800106a:	d11b      	bne.n	80010a4 <HAL_I2C_Master_Transmit+0x188>
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001070:	2b00      	cmp	r3, #0
 8001072:	d017      	beq.n	80010a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	1c5a      	adds	r2, r3, #1
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800108e:	b29b      	uxth	r3, r3
 8001090:	3b01      	subs	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800109c:	3b01      	subs	r3, #1
 800109e:	b29a      	uxth	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	6a39      	ldr	r1, [r7, #32]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f000 f9ce 	bl	800144a <I2C_WaitOnBTFFlagUntilTimeout>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00d      	beq.n	80010d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d107      	bne.n	80010cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e01a      	b.n	8001106 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d194      	bne.n	8001002 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2220      	movs	r2, #32
 80010ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	e000      	b.n	8001106 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001104:	2302      	movs	r3, #2
  }
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	00100002 	.word	0x00100002
 8001114:	ffff0000 	.word	0xffff0000

08001118 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af02      	add	r7, sp, #8
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	460b      	mov	r3, r1
 8001126:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b08      	cmp	r3, #8
 8001132:	d006      	beq.n	8001142 <I2C_MasterRequestWrite+0x2a>
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d003      	beq.n	8001142 <I2C_MasterRequestWrite+0x2a>
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001140:	d108      	bne.n	8001154 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	e00b      	b.n	800116c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	2b12      	cmp	r3, #18
 800115a:	d107      	bne.n	800116c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800116a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f000 f84f 	bl	800121c <I2C_WaitOnFlagUntilTimeout>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00d      	beq.n	80011a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001192:	d103      	bne.n	800119c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e035      	b.n	800120c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011a8:	d108      	bne.n	80011bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011aa:	897b      	ldrh	r3, [r7, #10]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80011b8:	611a      	str	r2, [r3, #16]
 80011ba:	e01b      	b.n	80011f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80011bc:	897b      	ldrh	r3, [r7, #10]
 80011be:	11db      	asrs	r3, r3, #7
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	f003 0306 	and.w	r3, r3, #6
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f063 030f 	orn	r3, r3, #15
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	490e      	ldr	r1, [pc, #56]	; (8001214 <I2C_MasterRequestWrite+0xfc>)
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f875 	bl	80012ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e010      	b.n	800120c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80011ea:	897b      	ldrh	r3, [r7, #10]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <I2C_MasterRequestWrite+0x100>)
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f865 	bl	80012ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	00010008 	.word	0x00010008
 8001218:	00010002 	.word	0x00010002

0800121c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4613      	mov	r3, r2
 800122a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800122c:	e025      	b.n	800127a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001234:	d021      	beq.n	800127a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001236:	f7ff fa6d 	bl	8000714 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d302      	bcc.n	800124c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d116      	bne.n	800127a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2220      	movs	r2, #32
 8001256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001266:	f043 0220 	orr.w	r2, r3, #32
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e023      	b.n	80012c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	0c1b      	lsrs	r3, r3, #16
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2b01      	cmp	r3, #1
 8001282:	d10d      	bne.n	80012a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	4013      	ands	r3, r2
 8001290:	b29b      	uxth	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	bf0c      	ite	eq
 8001296:	2301      	moveq	r3, #1
 8001298:	2300      	movne	r3, #0
 800129a:	b2db      	uxtb	r3, r3
 800129c:	461a      	mov	r2, r3
 800129e:	e00c      	b.n	80012ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4013      	ands	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf0c      	ite	eq
 80012b2:	2301      	moveq	r3, #1
 80012b4:	2300      	movne	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d0b6      	beq.n	800122e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b084      	sub	sp, #16
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80012d8:	e051      	b.n	800137e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	d123      	bne.n	8001332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001302:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2220      	movs	r2, #32
 800130e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f043 0204 	orr.w	r2, r3, #4
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e046      	b.n	80013c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001338:	d021      	beq.n	800137e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800133a:	f7ff f9eb 	bl	8000714 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	429a      	cmp	r2, r3
 8001348:	d302      	bcc.n	8001350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d116      	bne.n	800137e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2220      	movs	r2, #32
 800135a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f043 0220 	orr.w	r2, r3, #32
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e020      	b.n	80013c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	0c1b      	lsrs	r3, r3, #16
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10c      	bne.n	80013a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4013      	ands	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	bf14      	ite	ne
 800139a:	2301      	movne	r3, #1
 800139c:	2300      	moveq	r3, #0
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	e00b      	b.n	80013ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	43da      	mvns	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4013      	ands	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d18d      	bne.n	80012da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013d4:	e02d      	b.n	8001432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f878 	bl	80014cc <I2C_IsAcknowledgeFailed>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e02d      	b.n	8001442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013ec:	d021      	beq.n	8001432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013ee:	f7ff f991 	bl	8000714 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d302      	bcc.n	8001404 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d116      	bne.n	8001432 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2220      	movs	r2, #32
 800140e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f043 0220 	orr.w	r2, r3, #32
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e007      	b.n	8001442 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143c:	2b80      	cmp	r3, #128	; 0x80
 800143e:	d1ca      	bne.n	80013d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	60f8      	str	r0, [r7, #12]
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001456:	e02d      	b.n	80014b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f837 	bl	80014cc <I2C_IsAcknowledgeFailed>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e02d      	b.n	80014c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800146e:	d021      	beq.n	80014b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001470:	f7ff f950 	bl	8000714 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	429a      	cmp	r2, r3
 800147e:	d302      	bcc.n	8001486 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d116      	bne.n	80014b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2200      	movs	r2, #0
 800148a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2220      	movs	r2, #32
 8001490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f043 0220 	orr.w	r2, r3, #32
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e007      	b.n	80014c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b04      	cmp	r3, #4
 80014c0:	d1ca      	bne.n	8001458 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014e2:	d11b      	bne.n	800151c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80014ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2220      	movs	r2, #32
 80014f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f043 0204 	orr.w	r2, r3, #4
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e272      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 8087 	beq.w	8001656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001548:	4b92      	ldr	r3, [pc, #584]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 030c 	and.w	r3, r3, #12
 8001550:	2b04      	cmp	r3, #4
 8001552:	d00c      	beq.n	800156e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001554:	4b8f      	ldr	r3, [pc, #572]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d112      	bne.n	8001586 <HAL_RCC_OscConfig+0x5e>
 8001560:	4b8c      	ldr	r3, [pc, #560]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d10b      	bne.n	8001586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156e:	4b89      	ldr	r3, [pc, #548]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d06c      	beq.n	8001654 <HAL_RCC_OscConfig+0x12c>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d168      	bne.n	8001654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e24c      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158e:	d106      	bne.n	800159e <HAL_RCC_OscConfig+0x76>
 8001590:	4b80      	ldr	r3, [pc, #512]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a7f      	ldr	r2, [pc, #508]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e02e      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x98>
 80015a6:	4b7b      	ldr	r3, [pc, #492]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7a      	ldr	r2, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b78      	ldr	r3, [pc, #480]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a77      	ldr	r2, [pc, #476]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e01d      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d10c      	bne.n	80015e4 <HAL_RCC_OscConfig+0xbc>
 80015ca:	4b72      	ldr	r3, [pc, #456]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a71      	ldr	r2, [pc, #452]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a6e      	ldr	r2, [pc, #440]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e00b      	b.n	80015fc <HAL_RCC_OscConfig+0xd4>
 80015e4:	4b6b      	ldr	r3, [pc, #428]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6a      	ldr	r2, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	4b68      	ldr	r3, [pc, #416]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a67      	ldr	r2, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff f886 	bl	8000714 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff f882 	bl	8000714 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e200      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161e:	4b5d      	ldr	r3, [pc, #372]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f0      	beq.n	800160c <HAL_RCC_OscConfig+0xe4>
 800162a:	e014      	b.n	8001656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff f872 	bl	8000714 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001634:	f7ff f86e 	bl	8000714 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b64      	cmp	r3, #100	; 0x64
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e1ec      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001646:	4b53      	ldr	r3, [pc, #332]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x10c>
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001662:	4b4c      	ldr	r3, [pc, #304]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f003 030c 	and.w	r3, r3, #12
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00b      	beq.n	8001686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800166e:	4b49      	ldr	r3, [pc, #292]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d11c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x18c>
 800167a:	4b46      	ldr	r3, [pc, #280]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d116      	bne.n	80016b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d005      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d001      	beq.n	800169e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e1c0      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169e:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	4939      	ldr	r1, [pc, #228]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b2:	e03a      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d020      	beq.n	80016fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff f827 	bl	8000714 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ca:	f7ff f823 	bl	8000714 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1a1      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016dc:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016e8:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4927      	ldr	r1, [pc, #156]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	600b      	str	r3, [r1, #0]
 80016fc:	e015      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x270>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff f806 	bl	8000714 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170c:	f7ff f802 	bl	8000714 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e180      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03a      	beq.n	80017ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d019      	beq.n	8001772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_RCC_OscConfig+0x274>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001744:	f7fe ffe6 	bl	8000714 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174c:	f7fe ffe2 	bl	8000714 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e160      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_RCC_OscConfig+0x26c>)
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800176a:	2001      	movs	r0, #1
 800176c:	f000 fac4 	bl	8001cf8 <RCC_Delay>
 8001770:	e01c      	b.n	80017ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001772:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RCC_OscConfig+0x274>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001778:	f7fe ffcc 	bl	8000714 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177e:	e00f      	b.n	80017a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001780:	f7fe ffc8 	bl	8000714 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d908      	bls.n	80017a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e146      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	42420000 	.word	0x42420000
 800179c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a0:	4b92      	ldr	r3, [pc, #584]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d1e9      	bne.n	8001780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 80a6 	beq.w	8001906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017be:	4b8b      	ldr	r3, [pc, #556]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10d      	bne.n	80017e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ca:	4b88      	ldr	r3, [pc, #544]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	4a87      	ldr	r2, [pc, #540]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d4:	61d3      	str	r3, [r2, #28]
 80017d6:	4b85      	ldr	r3, [pc, #532]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b82      	ldr	r3, [pc, #520]	; (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d118      	bne.n	8001824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b7f      	ldr	r3, [pc, #508]	; (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7e      	ldr	r2, [pc, #504]	; (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7fe ff89 	bl	8000714 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7fe ff85 	bl	8000714 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b64      	cmp	r3, #100	; 0x64
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e103      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x4c8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x312>
 800182c:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a6e      	ldr	r2, [pc, #440]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	e02d      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x334>
 8001842:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4a69      	ldr	r2, [pc, #420]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6213      	str	r3, [r2, #32]
 800184e:	4b67      	ldr	r3, [pc, #412]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4a66      	ldr	r2, [pc, #408]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001854:	f023 0304 	bic.w	r3, r3, #4
 8001858:	6213      	str	r3, [r2, #32]
 800185a:	e01c      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b05      	cmp	r3, #5
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0x356>
 8001864:	4b61      	ldr	r3, [pc, #388]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4a60      	ldr	r2, [pc, #384]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	4b5e      	ldr	r3, [pc, #376]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4a5d      	ldr	r2, [pc, #372]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	6213      	str	r3, [r2, #32]
 800187c:	e00b      	b.n	8001896 <HAL_RCC_OscConfig+0x36e>
 800187e:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	4a5a      	ldr	r2, [pc, #360]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	6213      	str	r3, [r2, #32]
 800188a:	4b58      	ldr	r3, [pc, #352]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4a57      	ldr	r2, [pc, #348]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001890:	f023 0304 	bic.w	r3, r3, #4
 8001894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d015      	beq.n	80018ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7fe ff39 	bl	8000714 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7fe ff35 	bl	8000714 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0b1      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018bc:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ee      	beq.n	80018a6 <HAL_RCC_OscConfig+0x37e>
 80018c8:	e014      	b.n	80018f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ca:	f7fe ff23 	bl	8000714 <HAL_GetTick>
 80018ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d2:	f7fe ff1f 	bl	8000714 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e09b      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e8:	4b40      	ldr	r3, [pc, #256]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1ee      	bne.n	80018d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018fa:	4b3c      	ldr	r3, [pc, #240]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a3b      	ldr	r2, [pc, #236]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 8087 	beq.w	8001a1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001910:	4b36      	ldr	r3, [pc, #216]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d061      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d146      	bne.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001924:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7fe fef3 	bl	8000714 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001932:	f7fe feef 	bl	8000714 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e06d      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001944:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001958:	d108      	bne.n	800196c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800195a:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	4921      	ldr	r1, [pc, #132]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001968:	4313      	orrs	r3, r2
 800196a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196c:	4b1f      	ldr	r3, [pc, #124]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a19      	ldr	r1, [r3, #32]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	430b      	orrs	r3, r1
 800197e:	491b      	ldr	r1, [pc, #108]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001984:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7fe fec3 	bl	8000714 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7fe febf 	bl	8000714 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e03d      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x46a>
 80019b0:	e035      	b.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_RCC_OscConfig+0x4cc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7fe feac 	bl	8000714 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c0:	f7fe fea8 	bl	8000714 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e026      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x498>
 80019de:	e01e      	b.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e019      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40007000 	.word	0x40007000
 80019f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_RCC_OscConfig+0x500>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e000      	b.n	8001a20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000

08001a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0d0      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a40:	4b6a      	ldr	r3, [pc, #424]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d910      	bls.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4e:	4b67      	ldr	r3, [pc, #412]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 0207 	bic.w	r2, r3, #7
 8001a56:	4965      	ldr	r1, [pc, #404]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5e:	4b63      	ldr	r3, [pc, #396]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d001      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0b8      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d020      	beq.n	8001abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a88:	4b59      	ldr	r3, [pc, #356]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0308 	and.w	r3, r3, #8
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d005      	beq.n	8001aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa0:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b50      	ldr	r3, [pc, #320]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	494d      	ldr	r1, [pc, #308]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d040      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d115      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e07f      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aea:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e073      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e06b      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0a:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f023 0203 	bic.w	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4936      	ldr	r1, [pc, #216]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b1c:	f7fe fdfa 	bl	8000714 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7fe fdf6 	bl	8000714 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e053      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f003 020c 	and.w	r2, r3, #12
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d1eb      	bne.n	8001b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4b27      	ldr	r3, [pc, #156]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d210      	bcs.n	8001b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5a:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 0207 	bic.w	r2, r3, #7
 8001b62:	4922      	ldr	r1, [pc, #136]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e032      	b.n	8001be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d008      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	4916      	ldr	r1, [pc, #88]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d009      	beq.n	8001bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	490e      	ldr	r1, [pc, #56]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bba:	f000 f821 	bl	8001c00 <HAL_RCC_GetSysClockFreq>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	490a      	ldr	r1, [pc, #40]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	5ccb      	ldrb	r3, [r1, r3]
 8001bce:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd2:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x1d0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fd58 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022000 	.word	0x40022000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	08001dd0 	.word	0x08001dd0
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000004 	.word	0x20000004

08001c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c00:	b490      	push	{r4, r7}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c06:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_RCC_GetSysClockFreq+0xac>)
 8001c08:	1d3c      	adds	r4, r7, #4
 8001c0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c10:	f240 2301 	movw	r3, #513	; 0x201
 8001c14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2a:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3a:	2b08      	cmp	r3, #8
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x46>
 8001c3e:	e02b      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c42:	623b      	str	r3, [r7, #32]
      break;
 8001c44:	e02b      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	0c9b      	lsrs	r3, r3, #18
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3328      	adds	r3, #40	; 0x28
 8001c50:	443b      	add	r3, r7
 8001c52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0c5b      	lsrs	r3, r3, #17
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	3328      	adds	r3, #40	; 0x28
 8001c6e:	443b      	add	r3, r7
 8001c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c7a:	fb03 f202 	mul.w	r2, r3, r2
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	4a0b      	ldr	r2, [pc, #44]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8c:	fb02 f303 	mul.w	r3, r2, r3
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	623b      	str	r3, [r7, #32]
      break;
 8001c96:	e002      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c9a:	623b      	str	r3, [r7, #32]
      break;
 8001c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc90      	pop	{r4, r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	08001dc0 	.word	0x08001dc0
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	007a1200 	.word	0x007a1200
 8001cb8:	003d0900 	.word	0x003d0900

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	20000000 	.word	0x20000000

08001cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cd4:	f7ff fff2 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	0a1b      	lsrs	r3, r3, #8
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	4903      	ldr	r1, [pc, #12]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08001de0 	.word	0x08001de0

08001cf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <RCC_Delay+0x34>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <RCC_Delay+0x38>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0a5b      	lsrs	r3, r3, #9
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	fb02 f303 	mul.w	r3, r2, r3
 8001d12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d14:	bf00      	nop
  }
  while (Delay --);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1e5a      	subs	r2, r3, #1
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f9      	bne.n	8001d14 <RCC_Delay+0x1c>
}
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	10624dd3 	.word	0x10624dd3

08001d34 <__libc_init_array>:
 8001d34:	b570      	push	{r4, r5, r6, lr}
 8001d36:	2600      	movs	r6, #0
 8001d38:	4d0c      	ldr	r5, [pc, #48]	; (8001d6c <__libc_init_array+0x38>)
 8001d3a:	4c0d      	ldr	r4, [pc, #52]	; (8001d70 <__libc_init_array+0x3c>)
 8001d3c:	1b64      	subs	r4, r4, r5
 8001d3e:	10a4      	asrs	r4, r4, #2
 8001d40:	42a6      	cmp	r6, r4
 8001d42:	d109      	bne.n	8001d58 <__libc_init_array+0x24>
 8001d44:	f000 f822 	bl	8001d8c <_init>
 8001d48:	2600      	movs	r6, #0
 8001d4a:	4d0a      	ldr	r5, [pc, #40]	; (8001d74 <__libc_init_array+0x40>)
 8001d4c:	4c0a      	ldr	r4, [pc, #40]	; (8001d78 <__libc_init_array+0x44>)
 8001d4e:	1b64      	subs	r4, r4, r5
 8001d50:	10a4      	asrs	r4, r4, #2
 8001d52:	42a6      	cmp	r6, r4
 8001d54:	d105      	bne.n	8001d62 <__libc_init_array+0x2e>
 8001d56:	bd70      	pop	{r4, r5, r6, pc}
 8001d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d5c:	4798      	blx	r3
 8001d5e:	3601      	adds	r6, #1
 8001d60:	e7ee      	b.n	8001d40 <__libc_init_array+0xc>
 8001d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d66:	4798      	blx	r3
 8001d68:	3601      	adds	r6, #1
 8001d6a:	e7f2      	b.n	8001d52 <__libc_init_array+0x1e>
 8001d6c:	08001de8 	.word	0x08001de8
 8001d70:	08001de8 	.word	0x08001de8
 8001d74:	08001de8 	.word	0x08001de8
 8001d78:	08001dec 	.word	0x08001dec

08001d7c <memset>:
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4402      	add	r2, r0
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d100      	bne.n	8001d86 <memset+0xa>
 8001d84:	4770      	bx	lr
 8001d86:	f803 1b01 	strb.w	r1, [r3], #1
 8001d8a:	e7f9      	b.n	8001d80 <memset+0x4>

08001d8c <_init>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr

08001d98 <_fini>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr
